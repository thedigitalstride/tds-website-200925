'use client'

/**
 * Custom ALT Text Field Component
 * Native Payload pattern with "Generate ALT Tag" action button
 * Based on the slug field implementation
 */

import React, { useCallback, useState } from 'react'
import type { TextFieldClientProps } from 'payload'
import { useField, Button, TextInput, FieldLabel, useForm, toast } from '@payloadcms/ui'
import { Stars02 } from '@untitledui/icons'

import './AltTextField.scss'

// Simple client-side logger that respects NODE_ENV
const isDev = process.env.NODE_ENV === 'development'
const clientLogger = {
  log: (...args: unknown[]) => isDev && console.log(...args),
  error: (...args: unknown[]) => isDev && console.error(...args),
}

type AltTextFieldProps = TextFieldClientProps

export const AltTextField: React.FC<AltTextFieldProps> = ({ field, path, readOnly }) => {
  const { label } = field
  const { value, setValue } = useField<string>({ path: path || field.name })
  const { getDataByPath } = useForm()
  const [isGenerating, setIsGenerating] = useState(false)

  // Get URL and filename from form data
  let imageUrl = getDataByPath('url') as string | undefined
  const filename = getDataByPath('filename') as string | undefined

  // If URL is a relative Payload proxy path, we need to convert it to the blob URL
  // In production, Payload should return full blob URLs directly
  // In local development, we may get proxy URLs that need conversion
  if (imageUrl && imageUrl.startsWith('/api/media/file/')) {
    // Extract the filename from the proxy URL and construct the blob URL
    // Use env variable if set, otherwise use the known blob base URL
    const blobBaseUrl =
      process.env.NEXT_PUBLIC_BLOB_BASE_URL ||
      'https://ov6vgo85vq4jfktd.public.blob.vercel-storage.com'
    const blobFilename = imageUrl.replace('/api/media/file/', '')
    imageUrl = `${blobBaseUrl}/${blobFilename}`
    clientLogger.log('[AltTextField] Converted proxy URL to blob URL:', imageUrl)
  }

  const canGenerate = Boolean(imageUrl && filename && !isGenerating)

  const handleGenerate = useCallback(
    async (e: React.MouseEvent<Element>) => {
      e.preventDefault()

      if (!imageUrl || !filename) {
        toast.error('Cannot generate ALT tag: Image URL not available yet')
        return
      }

      setIsGenerating(true)

      try {
        const response = await fetch('/api/generate-alt-tag', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            imageUrl,
            filename,
          }),
        })

        const data = await response.json()

        if (!response.ok) {
          throw new Error(data.error || 'Failed to generate ALT tag')
        }

        if (data.success && data.altText) {
          setValue(data.altText)

          // Show different messages based on whether it's AI or fallback
          if (data.isFallback && data.warning) {
            toast.warning(`⚠️ ${data.warning}`)
          } else {
            // Show cost information if available
            let message = '✨ ALT tag generated by AI!'
            if (data.metadata?.cost) {
              const costFormatted = new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 4,
                maximumFractionDigits: 6,
              }).format(data.metadata.cost)
              message += ` Cost: ${costFormatted}`
            }
            if (data.metadata?.tokensUsed) {
              message += ` (${data.metadata.tokensUsed} tokens)`
            }
            toast.success(message)
            clientLogger.log('[AltTextField] Generation metadata:', data.metadata)
          }
        } else {
          throw new Error('No ALT text returned from API')
        }
      } catch (error) {
        clientLogger.error('Error generating ALT tag:', error)
        toast.error(error instanceof Error ? error.message : 'Failed to generate ALT tag')
      } finally {
        setIsGenerating(false)
      }
    },
    [imageUrl, filename, setValue],
  )

  return (
    <div className="field-type alt-text-field-component">
      <div className="label-wrapper">
        <FieldLabel htmlFor={`field-${path}`} label={label} />
        <Button
          className="generate-button"
          buttonStyle="none"
          onClick={handleGenerate}
          disabled={!canGenerate || Boolean(readOnly)}
        >
          <span className="button-content">
            <Stars02 className="ai-icon" />
            <span>{isGenerating ? 'Generating...' : 'Generate ALT Tag'}</span>
          </span>
        </Button>
      </div>
      <TextInput
        value={value as string}
        onChange={setValue}
        path={path || field.name}
        readOnly={Boolean(readOnly)}
      />
      {!canGenerate && !imageUrl && (
        <div className="field-description">
          Upload the image first, then you can generate ALT text
        </div>
      )}
    </div>
  )
}

export default AltTextField
