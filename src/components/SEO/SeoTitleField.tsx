'use client'

/**
 * Custom SEO Title Field Component
 * Native Payload pattern with "Generate SEO Title" action button
 * Based on the AltTextField implementation
 */

import React, { useCallback, useState } from 'react'
import type { TextFieldClientProps } from 'payload'
import { useField, Button, TextInput, FieldLabel, useForm, toast, useDocumentInfo } from '@payloadcms/ui'
import { Stars02 } from '@untitledui/icons'

import './SeoTitleField.scss'

// Simple client-side logger that respects NODE_ENV
const isDev = process.env.NODE_ENV === 'development'
const clientLogger = {
  log: (...args: unknown[]) => isDev && console.log(...args),
  error: (...args: unknown[]) => isDev && console.error(...args),
}

type SeoTitleFieldProps = TextFieldClientProps

export const SeoTitleField: React.FC<SeoTitleFieldProps> = ({ field, path, readOnly }) => {
  const { label } = field
  const { value, setValue } = useField<string>({ path: path || field.name })
  const { getDataByPath } = useForm()
  const documentInfo = useDocumentInfo()
  const [isGenerating, setIsGenerating] = useState(false)

  // Get document ID and collection from documentInfo or form data
  const id = documentInfo.id || getDataByPath('id')
  const collectionSlug = documentInfo.collectionSlug

  // Get keywords and guidance from form data
  const keywords = getDataByPath('seoKeywords') as string | undefined
  const guidance = getDataByPath('seoGuidance') as string | undefined

  const canGenerate = Boolean(id && collectionSlug && !isGenerating)

  const handleGenerate = useCallback(
    async (e: React.MouseEvent<Element>) => {
      e.preventDefault()

      if (!id || !collectionSlug) {
        toast.error('Cannot generate SEO title: Document not saved yet')
        return
      }

      setIsGenerating(true)

      try {
        // Convert ID to string to ensure it's always a string type
        const documentId = typeof id === 'string' ? id : String(id)

        clientLogger.log('[SeoTitleField] Generating with:', {
          collectionSlug,
          documentId,
          idType: typeof id,
          hasKeywords: Boolean(keywords),
          hasGuidance: Boolean(guidance),
        })

        const response = await fetch('/api/generate-seo-title', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            collectionSlug,
            documentId,
            keywords: keywords || '',
            guidance: guidance || '',
          }),
        })

        const data = await response.json()

        if (!response.ok) {
          throw new Error(data.error || 'Failed to generate SEO title')
        }

        if (data.success && data.text) {
          setValue(data.text)

          // Show success with metadata
          let message = 'âœ¨ SEO title generated by AI!'
          if (data.metadata?.cost) {
            const costFormatted = new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: 'USD',
              minimumFractionDigits: 4,
              maximumFractionDigits: 6,
            }).format(data.metadata.cost)
            message += ` Cost: ${costFormatted}`
          }
          if (data.metadata?.characterCount) {
            message += ` (${data.metadata.characterCount} chars)`
          }
          toast.success(message)
          clientLogger.log('[SeoTitleField] Generation metadata:', data.metadata)
        } else {
          throw new Error('No text returned from API')
        }
      } catch (error) {
        clientLogger.error('Error generating SEO title:', error)
        toast.error(error instanceof Error ? error.message : 'Failed to generate SEO title')
      } finally {
        setIsGenerating(false)
      }
    },
    [id, collectionSlug, keywords, guidance, setValue],
  )

  // Calculate character count and status
  const charCount = (value as string)?.length || 0
  const maxChars = 60 // Standard SEO title length
  let charStatus: 'good' | 'warning' | 'error' = 'good'
  if (charCount > maxChars) {
    charStatus = 'error'
  } else if (charCount > maxChars * 0.9) {
    charStatus = 'warning'
  }

  return (
    <div className="field-type seo-title-field-component">
      <div className="label-wrapper">
        <FieldLabel htmlFor={`field-${path}`} label={label} />
        <div className="title-actions">
          <span className={`char-count char-count--${charStatus}`}>
            {charCount}/{maxChars}
          </span>
          <Button
            className="generate-button"
            buttonStyle="none"
            onClick={handleGenerate}
            disabled={!canGenerate || Boolean(readOnly)}
          >
            <span className="button-content">
              <Stars02 className="ai-icon" />
              <span>{isGenerating ? 'Generating...' : 'Generate Title'}</span>
            </span>
          </Button>
        </div>
      </div>
      <TextInput
        value={value as string}
        onChange={setValue}
        path={path || field.name}
        readOnly={Boolean(readOnly)}
      />
      {charCount > maxChars && (
        <div className="field-error">
          Title exceeds recommended length of {maxChars} characters
        </div>
      )}
      {!id && (
        <div className="field-description">
          Save the document first, then you can generate SEO title
        </div>
      )}
    </div>
  )
}

export default SeoTitleField
