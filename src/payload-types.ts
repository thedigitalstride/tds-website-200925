/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    pages: Page;
    posts: Post;
    media: Media;
    categories: Category;
    faqs: Faq;
    icons: Icon;
    users: User;
    'ai-logs': AiLog;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    search: Search;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    pages: PagesSelect<false> | PagesSelect<true>;
    posts: PostsSelect<false> | PostsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    faqs: FaqsSelect<false> | FaqsSelect<true>;
    icons: IconsSelect<false> | IconsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'ai-logs': AiLogsSelect<false> | AiLogsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
    footer: Footer;
    notFound: NotFound;
    postsSettings: PostsSetting;
    aiSettings: AiSetting;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    notFound: NotFoundSelect<false> | NotFoundSelect<true>;
    postsSettings: PostsSettingsSelect<false> | PostsSettingsSelect<true>;
    aiSettings: AiSettingsSelect<false> | AiSettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  layout?:
    | (
        | HeroHeadingBlock
        | BackgroundSection
        | BreadcrumbBlock
        | CallToActionBlock
        | ContentBlock
        | MediaBlock
        | ArchiveBlock
        | FormBlock
        | CardGridBlock
        | FeaturesBlock
        | LatestPostsBlock
        | AccordionBlock
      )[]
    | null;
  /**
   * Enter target keywords for this page (one per line or comma-separated). AI will use these to optimize the meta title and description.
   */
  seoKeywords?: string | null;
  /**
   * Optional: Provide specific guidance for AI generation (tone, focus areas, unique selling points, target audience, etc.)
   */
  seoGuidance?: string | null;
  /**
   * Click "Generate Title" to create an SEO-optimized title using AI based on page content and keywords. This will automatically populate the SEO tab.
   */
  aiSeoTitle?: string | null;
  /**
   * Click "Generate Description" to create an SEO-optimized description using AI based on page content and keywords. This will automatically populate the SEO tab.
   */
  aiSeoDescription?: string | null;
  publishedAt?: string | null;
  slug: string;
  slugLock?: boolean | null;
  /**
   * Check this to exclude this page from the sitemap
   */
  excludeFromSitemap?: boolean | null;
  /**
   * Priority of this page relative to other pages (0.0 to 1.0). Leave empty for automatic priority.
   */
  sitemapPriority?: number | null;
  /**
   * How frequently the page is likely to change. Leave empty for automatic frequency.
   */
  sitemapChangefreq?: ('always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never') | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  parent?: (number | null) | Page;
  breadcrumbs?:
    | {
        doc?: (number | null) | Page;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroHeadingBlock".
 */
export interface HeroHeadingBlock {
  /**
   * Choose the hero layout style. Split Image displays content on left with optional image on right. Standard Contained is a clean, boxed layout without backgrounds.
   */
  heroLayout?: ('standard' | 'splitImage' | 'standardContained') | null;
  /**
   * Main headline text. Use line breaks to create multiple lines that will scale responsively.
   */
  headline: string;
  /**
   * Subtitle text displayed below the headline
   */
  subtitle?: string | null;
  /**
   * Enable typewriter animation effect for the headline (only available for Standard layout)
   */
  enableTypewriter?: boolean | null;
  /**
   * Color scheme for the headline. Primary adapts to light/dark modes, White stays white in both modes, Accent Blue is always accent color.
   */
  headlineColor?: ('primary' | 'white' | 'brand') | null;
  /**
   * Text alignment for headline and subtitle (not available for Split Image layout)
   */
  textAlignment?: ('left' | 'center') | null;
  /**
   * Vertical spacing around the hero section
   */
  spacing?: ('spacious' | 'normal' | 'compact' | 'minimal') | null;
  /**
   * Size variant for the subtitle text - Small reduces to 75% of normal size
   */
  subtitleSize?: ('small' | 'normal') | null;
  /**
   * Background style for the contained layout
   */
  heroBackground?: ('none' | 'primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent') | null;
  /**
   * Optional image for split layout. Appears on right side (desktop) with 30Â° diagonal edge, or below headline (mobile). Alt text is automatically used from the media upload.
   */
  splitImage?: (number | null) | Media;
  /**
   * Add up to 2 CTA buttons (e.g., "Get Started", "Learn More")
   */
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Button color variant from UntitledUI design system
           */
          uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary') | null;
          /**
           * Button size variant
           */
          uuiSize?: ('md' | 'lg' | 'xl') | null;
          /**
           * Select an icon from the Icons collection and configure its position relative to button text
           */
          buttonIconConfig?: {
            /**
             * Select an icon to display in the button
             */
            icon?: (number | null) | Icon;
            /**
             * Position of the icon relative to button text
             */
            position?: ('leading' | 'trailing') | null;
          };
          /**
           * Legacy field - use buttonIconConfig instead
           */
          buttonIcon?: string | null;
          /**
           * Legacy field - use buttonIconConfig instead
           */
          iconPos?: ('leading' | 'trailing') | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Add custom background with image, gradient, or custom styling (only available for Standard layout)
   */
  bg?: {
    /**
     * Toggle to enable background customization
     */
    enabled?: boolean | null;
    /**
     * Choose how tall the hero section should be. Full Height creates a full-screen hero that extends behind the header.
     */
    heightVariant?: ('default' | 'fullHeight') | null;
    /**
     * Background type - choose gradient for CSS gradients, image for uploads, or custom for animation containers
     */
    type?: ('none' | 'gradient' | 'image' | 'custom') | null;
    /**
     * Pre-configured gradient styles using theme colors
     */
    gradient?: ('brand-radial' | 'accent-gradient' | 'dark-light') | null;
    /**
     * Upload background image - will be optimized automatically
     */
    image?: (number | null) | Media;
    /**
     * Overlay darkness (0-100) - helps ensure text readability over images
     */
    imageOpacity?: number | null;
    /**
     * Custom CSS class for animation containers or React-based effects
     */
    customClass?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroHeading';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * Alt text for accessibility. Leave empty to auto-generate with AI, or click "Generate ALT Tag" button.
   */
  alt?: string | null;
  caption?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    'card-mobile'?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts".
 */
export interface Post {
  id: number;
  title: string;
  /**
   * Lead paragraph that appears under the title
   */
  subtitle?: string | null;
  /**
   * Blocks displayed before the post content (breadcrumbs always included by default)
   */
  beforeContent?: BreadcrumbBlock[] | null;
  /**
   * Optional table of contents for the sidebar
   */
  tableOfContents?:
    | {
        title: string;
        /**
         * Link to section (e.g., #introduction)
         */
        href: string;
        id?: string | null;
      }[]
    | null;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Optional blocks to display after the main post content
   */
  afterContent?: (LatestPostsBlock | CallToActionBlock | MediaBlock)[] | null;
  /**
   * Enter target keywords for this post (one per line or comma-separated). AI will use these to optimize the meta title and description.
   */
  seoKeywords?: string | null;
  /**
   * Optional: Provide specific guidance for AI generation (tone, focus areas, unique selling points, target audience, etc.)
   */
  seoGuidance?: string | null;
  /**
   * Click "Generate Title" to create an SEO-optimized title using AI based on post content and keywords. This will automatically populate the SEO tab.
   */
  aiSeoTitle?: string | null;
  /**
   * Click "Generate Description" to create an SEO-optimized description using AI based on post content and keywords. This will automatically populate the SEO tab.
   */
  aiSeoDescription?: string | null;
  relatedPosts?: (number | Post)[] | null;
  categories?: (number | Category)[] | null;
  /**
   * People who contributed to this post (separate from authors)
   */
  contributors?: (number | User)[] | null;
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  slug: string;
  slugLock?: boolean | null;
  /**
   * Check this to exclude this post from the sitemap
   */
  excludeFromSitemap?: boolean | null;
  /**
   * Priority of this post relative to other pages (0.0 to 1.0). Leave empty for automatic priority based on recency.
   */
  sitemapPriority?: number | null;
  /**
   * How frequently the post is likely to change. Leave empty for automatic frequency based on age.
   */
  sitemapChangefreq?: ('always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never') | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
  };
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
        nickname?: string | null;
        avatar?: (number | null) | Media;
      }[]
    | null;
  populatedContributors?:
    | {
        id?: string | null;
        name?: string | null;
        nickname?: string | null;
        avatar?: (number | null) | Media;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreadcrumbBlock".
 */
export interface BreadcrumbBlock {
  /**
   * Vertical spacing around the breadcrumb section. Breadcrumbs typically use compact spacing.
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'breadcrumb';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LatestPostsBlock".
 */
export interface LatestPostsBlock {
  header?: {
    /**
     * Toggle to show/hide the header section
     */
    showHeader?: boolean | null;
    /**
     * Small text above heading (e.g., "Our blog")
     */
    eyebrow?: string | null;
    /**
     * Main heading for the blog section
     */
    heading?: string | null;
    /**
     * Description text that appears below the heading
     */
    description?: string | null;
  };
  /**
   * Choose between automatically showing latest posts or manually selecting specific posts
   */
  contentSource?: ('latest' | 'manual') | null;
  opts?: {
    /**
     * How many latest posts to display
     */
    numPosts?: ('3' | '6' | '9' | '12') | null;
    /**
     * Optional: Show only posts from these categories (OR logic - matches any)
     */
    categoryFilter?: (number | Category)[] | null;
    /**
     * Optional: Hide these posts even if they match other filters
     */
    excludePosts?: (number | Post)[] | null;
    /**
     * How to sort the posts
     */
    sortBy?: ('date-desc' | 'date-asc' | 'title-asc' | 'title-desc') | null;
    /**
     * Show featured posts at the beginning, regardless of sort order
     */
    showFeaturedFirst?: boolean | null;
  };
  /**
   * Manually select which posts to display
   */
  selectedPosts?: (number | Post)[] | null;
  buttonConfig?: {
    /**
     * Toggle to show/hide the button that links to all posts
     */
    showButton?: boolean | null;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Button color variant from UntitledUI design system
       */
      uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
      /**
       * Button size variant
       */
      uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
      /**
       * Select an icon from the Icons collection and configure its position relative to button text
       */
      buttonIconConfig?: {
        /**
         * Select an icon to display in the button
         */
        icon?: (number | null) | Icon;
        /**
         * Position of the icon relative to button text
         */
        position?: ('leading' | 'trailing') | null;
      };
      /**
       * Legacy field - use buttonIconConfig instead
       */
      buttonIcon?: string | null;
      /**
       * Legacy field - use buttonIconConfig instead
       */
      iconPos?: ('leading' | 'trailing') | null;
    };
  };
  /**
   * Vertical spacing around this section
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'latestPosts';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage SVG icons for use throughout the site
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "icons".
 */
export interface Icon {
  id: number;
  /**
   * Unique identifier for the icon (e.g., "home", "settings")
   */
  name: string;
  /**
   * Human-readable name for the icon
   */
  label: string;
  /**
   * Category for organizing icons (can be AI-suggested)
   */
  category?:
    | (
        | 'navigation'
        | 'action'
        | 'social'
        | 'communication'
        | 'interface'
        | 'file'
        | 'device'
        | 'commerce'
        | 'media'
        | 'custom'
      )
    | null;
  /**
   * Optimized SVG code (will be processed to use currentColor)
   */
  svgCode: string;
  /**
   * Original SVG before optimization (backup)
   */
  originalSvg?: string | null;
  /**
   * Keywords for search (automatically generated by AI on upload)
   */
  keywords?:
    | {
        keyword: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Brief description of the icon (automatically generated by AI on upload)
   */
  description?: string | null;
  /**
   * Additional tags for categorization
   */
  tags?:
    | {
        tag: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Technical metadata about the icon
   */
  metadata?: {
    /**
     * Original width in pixels
     */
    width?: number | null;
    /**
     * Original height in pixels
     */
    height?: number | null;
    /**
     * SVG viewBox attribute
     */
    viewBox?: string | null;
    /**
     * Number of path elements
     */
    pathCount?: number | null;
    /**
     * Size in bytes after optimization
     */
    fileSize?: number | null;
  };
  /**
   * AI-generated metadata and enhancements
   */
  aiMetadata?: {
    /**
     * When AI last processed this icon
     */
    enhancedAt?: string | null;
    /**
     * Model used for enhancement
     */
    model?: string | null;
    /**
     * AI confidence in categorization (0-100)
     */
    confidence?: number | null;
  };
  /**
   * Track where and how often this icon is used
   */
  usage?: {
    /**
     * Number of times this icon is used
     */
    count?: number | null;
    /**
     * Last time this icon was referenced
     */
    lastUsed?: string | null;
    /**
     * Where this icon is used
     */
    locations?:
      | {
          collection?: string | null;
          field?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Button color variant from UntitledUI design system
           */
          uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
          /**
           * Button size variant
           */
          uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
          /**
           * Select an icon from the Icons collection and configure its position relative to button text
           */
          buttonIconConfig?: {
            /**
             * Select an icon to display in the button
             */
            icon?: (number | null) | Icon;
            /**
             * Position of the icon relative to button text
             */
            position?: ('leading' | 'trailing') | null;
          };
          /**
           * Legacy field - use buttonIconConfig instead
           */
          buttonIcon?: string | null;
          /**
           * Legacy field - use buttonIconConfig instead
           */
          iconPos?: ('leading' | 'trailing') | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Vertical spacing around this section
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  /**
   * Select or upload an image to display
   */
  media: number | Media;
  caption?: {
    /**
     * Text caption for the image
     */
    text?: string | null;
    link?: {
      /**
       * Link URL (e.g., https://example.com)
       */
      url?: string | null;
      /**
       * Link text
       */
      text?: string | null;
    };
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  /**
   * Display name for public content (e.g., blog posts)
   */
  nickname?: string | null;
  /**
   * Job title or role (e.g., "Product Manager", "Frontend Engineer")
   */
  role?: string | null;
  /**
   * Profile picture for contributor listings
   */
  avatar?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BackgroundSection".
 */
export interface BackgroundSection {
  header?: {
    /**
     * Toggle to show/hide the header section
     */
    showHeader?: boolean | null;
    /**
     * Small text above heading (e.g., "Our Services", "What We Offer")
     */
    eyebrow?: string | null;
    /**
     * Main heading for the section
     */
    heading?: string | null;
    /**
     * Description text that appears below the heading
     */
    description?: string | null;
    /**
     * Alignment of the section header
     */
    headerAlignment?: ('left' | 'center') | null;
    /**
     * Override text color for better contrast on backgrounds
     */
    textColor?: ('auto' | 'light' | 'dark') | null;
  };
  /**
   * Choose the type of background for this section
   */
  backgroundType?: ('none' | 'solid' | 'gradient' | 'image' | 'custom') | null;
  /**
   * Select a solid background color from the theme
   */
  solidColor?: ('primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent' | 'white' | 'dark') | null;
  /**
   * Choose a pre-defined gradient style
   */
  gradient?: ('brand-radial' | 'accent-gradient' | 'dark-light' | 'sunrise' | 'ocean' | 'purple-haze') | null;
  /**
   * Upload a background image - will be optimized automatically
   */
  backgroundImage?: (number | null) | Media;
  /**
   * Add an overlay to ensure text readability
   */
  imageOverlay?:
    | (
        | 'none'
        | 'light-20'
        | 'light-40'
        | 'light-60'
        | 'dark-20'
        | 'dark-40'
        | 'dark-60'
        | 'dark-80'
        | 'brand-40'
        | 'brand-60'
      )
    | null;
  /**
   * Control the focal point of the background image
   */
  imagePosition?: ('center' | 'top' | 'bottom' | 'left' | 'right') | null;
  /**
   * Add a subtle parallax scrolling effect to the background image
   */
  enableParallax?: boolean | null;
  /**
   * CSS class name for custom animations (e.g., "animated-gradient", "particle-bg")
   */
  customClass?: string | null;
  /**
   * Add content blocks that will appear inside this background section
   */
  contentBlocks: (CardGridBlock | ContentBlock | FeaturesBlock | CallToActionBlock | MediaBlock | AccordionBlock)[];
  /**
   * Vertical padding for this section
   */
  spacing?: ('none' | 'compact' | 'normal' | 'spacious' | 'extra') | null;
  /**
   * Maximum width for the content inside this section
   */
  contentWidth?: ('container' | 'wide' | 'full') | null;
  /**
   * Override text colors for all content in this section
   */
  colorMode?: ('auto' | 'light' | 'dark') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'backgroundSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardGridBlock".
 */
export interface CardGridBlock {
  header?: {
    /**
     * Toggle to show/hide the header section
     */
    showHeader?: boolean | null;
    /**
     * Small text above heading (e.g., "Our Services", "What We Offer")
     */
    eyebrow?: string | null;
    /**
     * Main heading for the card grid section
     */
    heading?: string | null;
    /**
     * Description text that appears below the heading
     */
    description?: string | null;
    /**
     * Alignment of the section header
     */
    headerAlignment?: ('left' | 'center') | null;
  };
  cards: {
    /**
     * Select an icon from the Icons collection to display in the card
     */
    icon?: (number | null) | Icon;
    /**
     * Small text above card title (e.g., "New", "Featured", "Step 01")
     */
    eyebrow?: string | null;
    /**
     * Main heading for this card (e.g., "Fast Delivery", "Expert Support")
     */
    title: string;
    /**
     * Rich description with headings, formatting, lists, and links
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Add an optional call-to-action link or button
     */
    enableLink?: boolean | null;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Button color variant from UntitledUI design system
       */
      uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
      /**
       * Button size variant
       */
      uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
      /**
       * Select an icon from the Icons collection and configure its position relative to button text
       */
      buttonIconConfig?: {
        /**
         * Select an icon to display in the button
         */
        icon?: (number | null) | Icon;
        /**
         * Position of the icon relative to button text
         */
        position?: ('leading' | 'trailing') | null;
      };
      /**
       * Legacy field - use buttonIconConfig instead
       */
      buttonIcon?: string | null;
      /**
       * Legacy field - use buttonIconConfig instead
       */
      iconPos?: ('leading' | 'trailing') | null;
    };
    id?: string | null;
  }[];
  /**
   * Layout arrangement for cards (icon position and alignment)
   */
  cardStyle?: ('card' | 'centered-icon' | 'left-icon' | 'horizontal-icon' | 'elevated-box') | null;
  /**
   * Visual style for cards (background and borders)
   */
  cardBackground?: ('none' | 'primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent' | 'line') | null;
  /**
   * Number of columns in the grid (1-4). Single column layout allows natural card heights; multi-column layouts use equal heights.
   */
  columns?: ('1' | '2' | '3' | '4') | null;
  /**
   * Icon color variant - matches button color system
   */
  iconColor?: ('primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent') | null;
  /**
   * Shape of the icon container
   */
  iconTheme?: ('rounded-square' | 'round') | null;
  /**
   * Vertical spacing around this section
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cardGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  /**
   * Add and arrange columns. â ï¸ Reordering columns with rich text can cause errors - instead, duplicate the column and delete the old one.
   */
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        /**
         * Vertical alignment of all content in this column (text, images, buttons)
         */
        verticalAlign?: ('top' | 'middle' | 'bottom') | null;
        /**
         * Choose between rich text content or a direct image upload
         */
        contentType?: ('richText' | 'image') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        /**
         * Select or upload an image for this column
         */
        image?: (number | null) | Media;
        imageOptions?: {
          /**
           * How the image should fit within its container
           */
          fit?: ('cover' | 'contain' | 'fill' | 'none') | null;
          /**
           * Aspect ratio constraint for the image
           */
          ratio?: ('auto' | 'square' | 'video' | 'portrait') | null;
          /**
           * Make the image stick to the top of the viewport when scrolling
           */
          isSticky?: boolean | null;
          /**
           * Top offset when sticky (e.g., "80px" for header clearance)
           */
          stickyTop?: string | null;
        };
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Button color variant from UntitledUI design system
           */
          uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
          /**
           * Button size variant
           */
          uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
          /**
           * Select an icon from the Icons collection and configure its position relative to button text
           */
          buttonIconConfig?: {
            /**
             * Select an icon to display in the button
             */
            icon?: (number | null) | Icon;
            /**
             * Position of the icon relative to button text
             */
            position?: ('leading' | 'trailing') | null;
          };
          /**
           * Legacy field - use buttonIconConfig instead
           */
          buttonIcon?: string | null;
          /**
           * Legacy field - use buttonIconConfig instead
           */
          iconPos?: ('leading' | 'trailing') | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Vertical spacing around this section
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesBlock".
 */
export interface FeaturesBlock {
  header?: {
    /**
     * Toggle to show/hide the header section
     */
    showHeader?: boolean | null;
    /**
     * Small text above heading (e.g., "Features")
     */
    eyebrow?: string | null;
    /**
     * Main heading for the features section
     */
    heading?: string | null;
    /**
     * Description text that appears below the heading
     */
    description?: string | null;
    /**
     * Alignment of the section header
     */
    headerAlignment?: ('left' | 'center') | null;
  };
  features: {
    /**
     * Select an icon from the Icons collection to display in the feature card
     */
    icon?: (number | null) | Icon;
    title: string;
    /**
     * Rich description with formatting, lists, and links
     */
    description?: {
      root: {
        type: string;
        children: {
          type: any;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Add an optional call-to-action link or button
     */
    enableLink?: boolean | null;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Button color variant from UntitledUI design system
       */
      uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
      /**
       * Button size variant
       */
      uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
      /**
       * Select an icon from the Icons collection and configure its position relative to button text
       */
      buttonIconConfig?: {
        /**
         * Select an icon to display in the button
         */
        icon?: (number | null) | Icon;
        /**
         * Position of the icon relative to button text
         */
        position?: ('leading' | 'trailing') | null;
      };
      /**
       * Legacy field - use buttonIconConfig instead
       */
      buttonIcon?: string | null;
      /**
       * Legacy field - use buttonIconConfig instead
       */
      iconPos?: ('leading' | 'trailing') | null;
    };
    id?: string | null;
  }[];
  /**
   * Configure how the features section is displayed
   */
  layoutOptions?: {
    /**
     * Layout arrangement for feature cards (icon position and alignment)
     */
    cardStyle?: ('card' | 'centered-icon' | 'left-icon' | 'horizontal-icon' | 'elevated-box') | null;
    /**
     * Visual style for feature cards (background and borders)
     */
    cardBackground?: ('primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent' | 'line') | null;
    /**
     * Number of columns in the grid (1-4). Automatically switches to full-width if only one feature exists.
     */
    columns?: ('1' | '2' | '3' | '4') | null;
    /**
     * Icon color variant - matches button color system
     */
    iconColor?: ('primary' | 'primary-reversed' | 'secondary' | 'tertiary' | 'accent') | null;
    /**
     * Shape of the icon container
     */
    iconTheme?: ('rounded-square' | 'round') | null;
    /**
     * Vertical spacing around this section
     */
    spacing?: ('compact' | 'normal' | 'spacious') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'features';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccordionBlock".
 */
export interface AccordionBlock {
  header?: {
    /**
     * Toggle to show/hide the header section
     */
    showHeader?: boolean | null;
    /**
     * Small text above heading (e.g., "FAQs", "Common Questions")
     */
    eyebrow?: string | null;
    /**
     * Main heading for the accordion section
     */
    heading?: string | null;
    /**
     * Description text that appears below the heading
     */
    description?: string | null;
    /**
     * Alignment of the section header
     */
    headerAlignment?: ('left' | 'center') | null;
  };
  /**
   * Choose between automatically showing FAQs based on filters or manually selecting specific FAQs
   */
  contentSource?: ('dynamic' | 'manual') | null;
  opts?: {
    /**
     * Optional: Show only FAQs from these categories (OR logic - matches any)
     */
    categoryFilter?: (number | Category)[] | null;
    /**
     * Maximum number of FAQs to display
     */
    limit?: ('3' | '6' | '9' | '12' | 'all') | null;
    /**
     * How to sort the FAQs. Featured FAQs always appear first.
     */
    sortBy?: ('order' | 'date' | 'question-asc' | 'question-desc') | null;
    /**
     * Optional: Hide these FAQs even if they match other filters
     */
    excludeFAQs?: (number | Faq)[] | null;
  };
  /**
   * Manually select which FAQs to display
   */
  selectedFAQs?: (number | Faq)[] | null;
  /**
   * Configure how accordions are displayed
   */
  displayOptions?: {
    /**
     * Display category badges on each FAQ item
     */
    showCategories?: boolean | null;
    /**
     * Initial state when the page loads
     */
    defaultState?: ('all-collapsed' | 'first-open' | 'all-open') | null;
    /**
     * Allow multiple accordion items to be open simultaneously
     */
    allowMultipleOpen?: boolean | null;
    /**
     * Add a search box to filter FAQs client-side (recommended for 6+ items)
     */
    enableSearch?: boolean | null;
    /**
     * Position of the toggle icon
     */
    iconPosition?: ('right' | 'left' | 'none') | null;
    /**
     * Style of the toggle icon
     */
    iconStyle?: ('chevron' | 'plus-minus') | null;
  };
  /**
   * Configure the visual appearance
   */
  layoutOptions?: {
    /**
     * Vertical spacing around this section
     */
    spacing?: ('compact' | 'normal' | 'spacious') | null;
    /**
     * Background color for accordion items
     */
    cardBackground?: ('primary' | 'secondary' | 'accent') | null;
    /**
     * How to separate accordion items
     */
    dividerStyle?: ('line' | 'card' | 'none') | null;
    /**
     * Speed of expand/collapse animations
     */
    animationSpeed?: ('fast' | 'normal' | 'slow') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordion';
}
/**
 * Frequently Asked Questions that can be displayed in AccordionBlocks or inline in rich text
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs".
 */
export interface Faq {
  id: number;
  /**
   * The question text (e.g., "How do I get started?")
   */
  question: string;
  /**
   * Rich answer with images, code blocks, videos, and links to related content
   */
  answer: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Link to blog posts or pages that provide more detail on this topic
   */
  relatedContent?:
    | (
        | {
            relationTo: 'posts';
            value: number | Post;
          }
        | {
            relationTo: 'pages';
            value: number | Page;
          }
      )[]
    | null;
  /**
   * PDFs, guides, templates that supplement this FAQ
   */
  resources?:
    | {
        title: string;
        file: number | Media;
        /**
         * Brief description of what this resource contains
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Tag FAQs with categories for filtering in AccordionBlocks
   */
  categories?: (number | Category)[] | null;
  /**
   * Pin this FAQ to the top of filtered lists
   */
  featured?: boolean | null;
  /**
   * Manual ordering (lower numbers appear first). Featured FAQs always appear before non-featured.
   */
  order?: number | null;
  slug?: string | null;
  slugLock?: boolean | null;
  /**
   * SEO description for standalone FAQ pages (if using)
   */
  metaDescription?: string | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'posts' | null;
  categories?: (number | Category)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'posts';
        value: number | Post;
      }[]
    | null;
  /**
   * Vertical spacing around this section
   */
  spacing?: ('compact' | 'normal' | 'spacious') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: any;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: any;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Audit trail of AI API usage with cost tracking
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ai-logs".
 */
export interface AiLog {
  id: number;
  /**
   * Type of AI operation performed
   */
  operation: 'alt-tag' | 'seo-title' | 'seo-description' | 'icon-enhancement' | 'content' | 'other';
  /**
   * AI provider used (OpenAI, Anthropic, etc.)
   */
  provider: string;
  /**
   * Model used for generation
   */
  model: string;
  /**
   * Whether the operation succeeded
   */
  success: boolean;
  /**
   * Total tokens consumed
   */
  tokensUsed?: number | null;
  /**
   * Estimated cost in USD
   */
  cost: number;
  /**
   * Operation duration in milliseconds
   */
  duration?: number | null;
  /**
   * Image URL (for ALT tag operations)
   */
  imageUrl?: string | null;
  /**
   * Generated ALT text
   */
  altText?: string | null;
  /**
   * Generated SEO title
   */
  seoTitle?: string | null;
  /**
   * Generated SEO description
   */
  seoDescription?: string | null;
  /**
   * Keywords used for SEO generation
   */
  keywords?:
    | {
        keyword?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Key themes extracted from content
   */
  contentThemes?:
    | {
        theme?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Character count of generated text
   */
  characterCount?: number | null;
  /**
   * Error message if operation failed
   */
  error?: string | null;
  /**
   * The prompt/input sent to the AI model
   */
  aiInput?: string | null;
  /**
   * The raw response received from the AI model
   */
  aiOutput?: string | null;
  /**
   * Additional metadata from the AI response
   */
  metadata?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * User who triggered the operation (if applicable)
   */
  user?: (number | null) | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'posts';
    value: number | Post;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        categoryID?: string | null;
        title?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'posts';
        value: number | Post;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'faqs';
        value: number | Faq;
      } | null)
    | ({
        relationTo: 'icons';
        value: number | Icon;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'ai-logs';
        value: number | AiLog;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  layout?:
    | T
    | {
        heroHeading?: T | HeroHeadingBlockSelect<T>;
        backgroundSection?: T | BackgroundSectionSelect<T>;
        breadcrumb?: T | BreadcrumbBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        cardGrid?: T | CardGridBlockSelect<T>;
        features?: T | FeaturesBlockSelect<T>;
        latestPosts?: T | LatestPostsBlockSelect<T>;
        accordion?: T | AccordionBlockSelect<T>;
      };
  seoKeywords?: T;
  seoGuidance?: T;
  aiSeoTitle?: T;
  aiSeoDescription?: T;
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  excludeFromSitemap?: T;
  sitemapPriority?: T;
  sitemapChangefreq?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HeroHeadingBlock_select".
 */
export interface HeroHeadingBlockSelect<T extends boolean = true> {
  heroLayout?: T;
  headline?: T;
  subtitle?: T;
  enableTypewriter?: T;
  headlineColor?: T;
  textAlignment?: T;
  spacing?: T;
  subtitleSize?: T;
  heroBackground?: T;
  splitImage?: T;
  buttons?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
        id?: T;
      };
  bg?:
    | T
    | {
        enabled?: T;
        heightVariant?: T;
        type?: T;
        gradient?: T;
        image?: T;
        imageOpacity?: T;
        customClass?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BackgroundSection_select".
 */
export interface BackgroundSectionSelect<T extends boolean = true> {
  header?:
    | T
    | {
        showHeader?: T;
        eyebrow?: T;
        heading?: T;
        description?: T;
        headerAlignment?: T;
        textColor?: T;
      };
  backgroundType?: T;
  solidColor?: T;
  gradient?: T;
  backgroundImage?: T;
  imageOverlay?: T;
  imagePosition?: T;
  enableParallax?: T;
  customClass?: T;
  contentBlocks?:
    | T
    | {
        cardGrid?: T | CardGridBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        features?: T | FeaturesBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        accordion?: T | AccordionBlockSelect<T>;
      };
  spacing?: T;
  contentWidth?: T;
  colorMode?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardGridBlock_select".
 */
export interface CardGridBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        showHeader?: T;
        eyebrow?: T;
        heading?: T;
        description?: T;
        headerAlignment?: T;
      };
  cards?:
    | T
    | {
        icon?: T;
        eyebrow?: T;
        title?: T;
        description?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
        id?: T;
      };
  cardStyle?: T;
  cardBackground?: T;
  columns?: T;
  iconColor?: T;
  iconTheme?: T;
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        verticalAlign?: T;
        contentType?: T;
        richText?: T;
        image?: T;
        imageOptions?:
          | T
          | {
              fit?: T;
              ratio?: T;
              isSticky?: T;
              stickyTop?: T;
            };
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
        id?: T;
      };
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FeaturesBlock_select".
 */
export interface FeaturesBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        showHeader?: T;
        eyebrow?: T;
        heading?: T;
        description?: T;
        headerAlignment?: T;
      };
  features?:
    | T
    | {
        icon?: T;
        title?: T;
        description?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
        id?: T;
      };
  layoutOptions?:
    | T
    | {
        cardStyle?: T;
        cardBackground?: T;
        columns?: T;
        iconColor?: T;
        iconTheme?: T;
        spacing?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
        id?: T;
      };
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  caption?:
    | T
    | {
        text?: T;
        link?:
          | T
          | {
              url?: T;
              text?: T;
            };
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "AccordionBlock_select".
 */
export interface AccordionBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        showHeader?: T;
        eyebrow?: T;
        heading?: T;
        description?: T;
        headerAlignment?: T;
      };
  contentSource?: T;
  opts?:
    | T
    | {
        categoryFilter?: T;
        limit?: T;
        sortBy?: T;
        excludeFAQs?: T;
      };
  selectedFAQs?: T;
  displayOptions?:
    | T
    | {
        showCategories?: T;
        defaultState?: T;
        allowMultipleOpen?: T;
        enableSearch?: T;
        iconPosition?: T;
        iconStyle?: T;
      };
  layoutOptions?:
    | T
    | {
        spacing?: T;
        cardBackground?: T;
        dividerStyle?: T;
        animationSpeed?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BreadcrumbBlock_select".
 */
export interface BreadcrumbBlockSelect<T extends boolean = true> {
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LatestPostsBlock_select".
 */
export interface LatestPostsBlockSelect<T extends boolean = true> {
  header?:
    | T
    | {
        showHeader?: T;
        eyebrow?: T;
        heading?: T;
        description?: T;
      };
  contentSource?: T;
  opts?:
    | T
    | {
        numPosts?: T;
        categoryFilter?: T;
        excludePosts?: T;
        sortBy?: T;
        showFeaturedFirst?: T;
      };
  selectedPosts?: T;
  buttonConfig?:
    | T
    | {
        showButton?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
      };
  spacing?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "posts_select".
 */
export interface PostsSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  beforeContent?:
    | T
    | {
        breadcrumb?: T | BreadcrumbBlockSelect<T>;
      };
  tableOfContents?:
    | T
    | {
        title?: T;
        href?: T;
        id?: T;
      };
  heroImage?: T;
  content?: T;
  afterContent?:
    | T
    | {
        latestPosts?: T | LatestPostsBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
      };
  seoKeywords?: T;
  seoGuidance?: T;
  aiSeoTitle?: T;
  aiSeoDescription?: T;
  relatedPosts?: T;
  categories?: T;
  contributors?: T;
  publishedAt?: T;
  authors?: T;
  slug?: T;
  slugLock?: T;
  excludeFromSitemap?: T;
  sitemapPriority?: T;
  sitemapChangefreq?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
        nickname?: T;
        avatar?: T;
      };
  populatedContributors?:
    | T
    | {
        id?: T;
        name?: T;
        nickname?: T;
        avatar?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        'card-mobile'?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faqs_select".
 */
export interface FaqsSelect<T extends boolean = true> {
  question?: T;
  answer?: T;
  relatedContent?: T;
  resources?:
    | T
    | {
        title?: T;
        file?: T;
        description?: T;
        id?: T;
      };
  categories?: T;
  featured?: T;
  order?: T;
  slug?: T;
  slugLock?: T;
  metaDescription?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "icons_select".
 */
export interface IconsSelect<T extends boolean = true> {
  name?: T;
  label?: T;
  category?: T;
  svgCode?: T;
  originalSvg?: T;
  keywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  description?: T;
  tags?:
    | T
    | {
        tag?: T;
        id?: T;
      };
  metadata?:
    | T
    | {
        width?: T;
        height?: T;
        viewBox?: T;
        pathCount?: T;
        fileSize?: T;
      };
  aiMetadata?:
    | T
    | {
        enhancedAt?: T;
        model?: T;
        confidence?: T;
      };
  usage?:
    | T
    | {
        count?: T;
        lastUsed?: T;
        locations?:
          | T
          | {
              collection?: T;
              field?: T;
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  nickname?: T;
  role?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ai-logs_select".
 */
export interface AiLogsSelect<T extends boolean = true> {
  operation?: T;
  provider?: T;
  model?: T;
  success?: T;
  tokensUsed?: T;
  cost?: T;
  duration?: T;
  imageUrl?: T;
  altText?: T;
  seoTitle?: T;
  seoDescription?: T;
  keywords?:
    | T
    | {
        keyword?: T;
        id?: T;
      };
  contentThemes?:
    | T
    | {
        theme?: T;
        id?: T;
      };
  characterCount?: T;
  error?: T;
  aiInput?: T;
  aiOutput?: T;
  metadata?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        categoryID?: T;
        title?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  navItems?:
    | {
        /**
         * Main navigation item. URL is optional when dropdown menu is enabled (label still required for dropdown trigger text).
         */
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
        };
        /**
         * Enable to show dropdown menu for this navigation item
         */
        hasDropdown?: boolean | null;
        /**
         * Links that appear in the dropdown menu
         */
        dropdownItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: number | Post;
                    } | null);
                url?: string | null;
                label: string;
              };
              /**
               * Brief description that appears below the link text
               */
              description?: string | null;
              /**
               * Select an icon to display next to the dropdown item
               */
              icon?: (number | null) | Icon;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Call-to-action button that appears on the right side of the header
   */
  ctaButton: {
    /**
     * Toggle to show/hide the call-to-action button
     */
    enabled?: boolean | null;
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Button color variant from UntitledUI design system
       */
      uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
      /**
       * Button size variant
       */
      uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
      /**
       * Select an icon from the Icons collection and configure its position relative to button text
       */
      buttonIconConfig?: {
        /**
         * Select an icon to display in the button
         */
        icon?: (number | null) | Icon;
        /**
         * Position of the icon relative to button text
         */
        position?: ('leading' | 'trailing') | null;
      };
      /**
       * Legacy field - use buttonIconConfig instead
       */
      buttonIcon?: string | null;
      /**
       * Legacy field - use buttonIconConfig instead
       */
      iconPos?: ('leading' | 'trailing') | null;
    };
  };
  /**
   * Optional mobile-specific CTA button that appears in the mobile header bar (centered between logo and menu button). If not enabled, falls back to the desktop CTA button.
   */
  mobileCtaButton?: {
    /**
     * Enable to customize the mobile header button. If disabled, the desktop CTA button will be used on mobile.
     */
    enabled?: boolean | null;
    link?: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'posts';
            value: number | Post;
          } | null);
      url?: string | null;
      label: string;
      /**
       * Button color variant from UntitledUI design system
       */
      uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
      /**
       * Button size variant
       */
      uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
      /**
       * Select an icon from the Icons collection and configure its position relative to button text
       */
      buttonIconConfig?: {
        /**
         * Select an icon to display in the button
         */
        icon?: (number | null) | Icon;
        /**
         * Position of the icon relative to button text
         */
        position?: ('leading' | 'trailing') | null;
      };
      /**
       * Legacy field - use buttonIconConfig instead
       */
      buttonIcon?: string | null;
      /**
       * Legacy field - use buttonIconConfig instead
       */
      iconPos?: ('leading' | 'trailing') | null;
    };
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  companyInfo?: {
    /**
     * Brief company description that appears below the logo
     */
    description?: string | null;
  };
  /**
   * Navigation columns (maximum 5 columns)
   */
  navColumns?:
    | {
        /**
         * Column heading (e.g., "Product", "Company")
         */
        label?: string | null;
        /**
         * Links for this navigation column
         */
        items?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'posts';
                      value: number | Post;
                    } | null);
                url?: string | null;
                label: string;
                /**
                 * Button color variant from UntitledUI design system
                 */
                uuiColor?: 'link' | null;
                /**
                 * Button size variant
                 */
                uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
                /**
                 * Select an icon from the Icons collection and configure its position relative to button text
                 */
                buttonIconConfig?: {
                  /**
                   * Select an icon to display in the button
                   */
                  icon?: (number | null) | Icon;
                  /**
                   * Position of the icon relative to button text
                   */
                  position?: ('leading' | 'trailing') | null;
                };
                /**
                 * Legacy field - use buttonIconConfig instead
                 */
                buttonIcon?: string | null;
                /**
                 * Legacy field - use buttonIconConfig instead
                 */
                iconPos?: ('leading' | 'trailing') | null;
              };
              /**
               * Optional badge to highlight new or featured items
               */
              badge?: {
                /**
                 * Badge text (e.g., "New", "Beta")
                 */
                text?: string | null;
                /**
                 * Modern badges only support gray color
                 */
                color?: 'gray' | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Social media links that appear at the bottom
   */
  socialLinks?:
    | {
        /**
         * Select the social media platform
         */
        platform?: ('x' | 'linkedin' | 'facebook' | 'github' | 'angellist' | 'dribbble' | 'layers') | null;
        /**
         * Full URL to your social media profile
         */
        url?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * Copyright notice that appears at the bottom
   */
  copyrightText?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notFound".
 */
export interface NotFound {
  id: number;
  /**
   * Main heading displayed on the 404 page
   */
  heading: string;
  /**
   * Subheading text displayed below the main heading
   */
  subheading?: string | null;
  /**
   * Link to help users navigate back (typically to the home page)
   */
  link: {
    type?: ('reference' | 'custom') | null;
    newTab?: boolean | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    url?: string | null;
    label: string;
    /**
     * Button color variant from UntitledUI design system
     */
    uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
    /**
     * Button size variant
     */
    uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
    /**
     * Select an icon from the Icons collection and configure its position relative to button text
     */
    buttonIconConfig?: {
      /**
       * Select an icon to display in the button
       */
      icon?: (number | null) | Icon;
      /**
       * Position of the icon relative to button text
       */
      position?: ('leading' | 'trailing') | null;
    };
    /**
     * Legacy field - use buttonIconConfig instead
     */
    buttonIcon?: string | null;
    /**
     * Legacy field - use buttonIconConfig instead
     */
    iconPos?: ('leading' | 'trailing') | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "postsSettings".
 */
export interface PostsSetting {
  id: number;
  /**
   * Blocks to display before the posts grid on /news-insights (use HeroHeadingBlock for page header)
   */
  beforeBlocks?:
    | (HeroHeadingBlock | BreadcrumbBlock | CallToActionBlock | ContentBlock | MediaBlock | FormBlock)[]
    | null;
  /**
   * Optional blocks to display after the posts grid on /news-insights
   */
  afterBlocks?: (CallToActionBlock | ContentBlock | MediaBlock | FormBlock)[] | null;
  /**
   * Configure how many columns to display in the posts grid for different screen sizes
   */
  gridColumns?: {
    /**
     * Number of columns on large screens (1024px and above)
     */
    desktop?: ('2' | '3' | '4') | null;
    /**
     * Number of columns on medium screens (768px - 1023px)
     */
    tablet?: ('2' | '3' | '4') | null;
    /**
     * Number of columns on small screens (below 768px)
     */
    mobile?: ('1' | '2') | null;
  };
  /**
   * How posts are displayed site-wide. Auto automatically switches to carousel when posts exceed columns.
   */
  displayMode?: ('auto' | 'grid' | 'carousel') | null;
  /**
   * Configure carousel behavior (only applies in carousel or auto mode)
   */
  carouselSettings?: {
    /**
     * Allow users to drag/swipe the carousel (recommended)
     */
    enableDrag?: boolean | null;
    /**
     * Display prev/next arrows on carousel
     */
    showArrows?: boolean | null;
    /**
     * Display a progress indicator below carousel
     */
    showProgress?: boolean | null;
    /**
     * How much of adjacent cards to show. Peek improves discoverability by showing users there is more content.
     */
    peekAmount?: ('none' | 'small' | 'medium' | 'large') | null;
    /**
     * Automatically advance to next card (pauses on hover/interaction)
     */
    autoPlay?: boolean | null;
    /**
     * Milliseconds between auto-advance (2000-10000)
     */
    autoPlayInterval?: number | null;
  };
  /**
   * Customize what content is shown on each blog card site-wide
   */
  cardDisplay?: {
    /**
     * Display category badges on cards
     */
    showCategories?: boolean | null;
    /**
     * Display author name and avatar
     */
    showAuthor?: boolean | null;
    /**
     * Display the published date
     */
    showDate?: boolean | null;
    /**
     * Display estimated reading time
     */
    showReadingTime?: boolean | null;
    /**
     * Display post summary/excerpt
     */
    showExcerpt?: boolean | null;
    /**
     * Maximum length for post excerpts
     */
    excerptLength?: ('short' | 'medium' | 'long') | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * Configure AI-powered content generation features
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aiSettings".
 */
export interface AiSetting {
  id: number;
  /**
   * Select your preferred AI provider for content generation
   */
  provider: 'openai' | 'anthropic' | 'custom';
  /**
   * Your API key for the selected provider. This will be stored securely.
   */
  apiKey: string;
  /**
   * Default model for all AI operations. Can be overridden per task below. Vision models (gpt-4o, gpt-4o-mini) are required for image analysis.
   */
  model?: ('gpt-4o' | 'gpt-4o-mini' | 'gpt-4-turbo' | 'gpt-4' | 'gpt-3.5-turbo') | null;
  /**
   * Full URL to your custom API endpoint (for self-hosted or alternative providers)
   */
  customEndpoint?: string | null;
  /**
   * Controls randomness. Lower values (0.0-0.5) are more focused and deterministic, higher values (0.5-2.0) are more creative.
   */
  temperature?: number | null;
  /**
   * Maximum length of AI responses in tokens
   */
  maxTokens?: number | null;
  /**
   * How long to wait for AI responses before timing out
   */
  timeout?: number | null;
  altTag?: {
    /**
     * Automatically generate ALT tags for images when uploaded without ALT text
     */
    enabled?: boolean | null;
    /**
     * Override the default model for ALT tag generation. Vision-capable models required. Estimated cost: gpt-4o-mini ~$0.001, gpt-4o ~$0.003 per image.
     */
    model?: ('' | 'gpt-4o' | 'gpt-4o-mini') | null;
    /**
     * The instruction prompt sent to the AI. Customize this to fine-tune ALT tag generation style and format.
     */
    systemPrimer?: string | null;
    /**
     * Maximum character length for generated ALT text. 125 is recommended for SEO and accessibility.
     */
    maxLength?: number | null;
    /**
     * When generating ALT tags, include context about where the image is used (page title, category, etc.)
     */
    includeContext?: boolean | null;
    /**
     * Mark AI-generated ALT tags for review before they are used in production
     */
    requireReview?: boolean | null;
    /**
     * Use cleaned filename as ALT text if AI generation fails
     */
    fallbackToFilename?: boolean | null;
    /**
     * Keep a record of all AI-generated ALT tags for auditing and quality control
     */
    logGenerations?: boolean | null;
  };
  seoMeta: {
    /**
     * Enable AI generation buttons for meta titles and descriptions in Pages and Posts
     */
    enabled?: boolean | null;
    /**
     * Override the default model for title generation. Text-only models work fine for titles. Estimated cost: gpt-3.5-turbo ~$0.0001, gpt-4o-mini ~$0.0003 per generation.
     */
    titleModel?: ('' | 'gpt-4o' | 'gpt-4o-mini' | 'gpt-4-turbo' | 'gpt-3.5-turbo') | null;
    /**
     * The instruction prompt for AI title generation. Customize to match your brand voice and SEO strategy.
     */
    titleSystemPrimer: string;
    /**
     * Maximum character length for meta titles. Google typically displays 50-60 characters.
     */
    titleMaxLength?: number | null;
    /**
     * Automatically include " | The Digital Stride" at the end of generated titles
     */
    includeBrandInTitle?: boolean | null;
    /**
     * Override the default model for description generation. Text-only models work fine. Estimated cost: gpt-3.5-turbo ~$0.0002, gpt-4o-mini ~$0.0005 per generation.
     */
    descriptionModel?: ('' | 'gpt-4o' | 'gpt-4o-mini' | 'gpt-4-turbo' | 'gpt-3.5-turbo') | null;
    /**
     * The instruction prompt for AI description generation. Customize for your target audience and goals.
     */
    descriptionSystemPrimer: string;
    /**
     * Minimum character length for optimal SERP display. 150 is recommended.
     */
    descriptionMinLength?: number | null;
    /**
     * Maximum character length. Google typically displays up to 160 characters.
     */
    descriptionMaxLength?: number | null;
    /**
     * Read and analyze all page blocks or post content to extract key themes and topics
     */
    analyzeFullContent?: boolean | null;
    /**
     * How to balance user-provided keywords vs content-extracted themes
     */
    contentWeight?: ('keywords' | 'balanced' | 'content') | null;
    /**
     * Use AI to identify and extract main themes from content automatically
     */
    extractKeyThemes?: boolean | null;
    /**
     * Maximum tokens to send to AI for content analysis (higher = more context but higher cost)
     */
    maxContentTokens?: number | null;
  };
  /**
   * AI-assisted blog post creation and content generation
   */
  blogPostGeneration?: {
    enabled?: boolean | null;
  };
  iconEnhancement?: {
    /**
     * Automatically generate keywords, categories, and descriptions for uploaded icons
     */
    enabled?: boolean | null;
    /**
     * Model for generating icon metadata. GPT-4o-mini recommended for best cost/performance. Estimated cost: ~$0.0001 per icon.
     */
    model?: ('' | 'gpt-4o-mini' | 'gpt-4o' | 'gpt-3.5-turbo') | null;
    /**
     * Generate search keywords based on icon name and visual patterns
     */
    autoKeywords?: boolean | null;
    /**
     * Automatically assign categories (navigation, action, social, etc.)
     */
    autoCategory?: boolean | null;
    /**
     * Use AI embeddings for natural language icon search (additional cost)
     */
    semanticSearch?: boolean | null;
    /**
     * Instructions for AI icon analysis. Customize based on your icon naming conventions.
     */
    systemPrimer?: string | null;
    /**
     * Maximum number of keywords to generate per icon
     */
    maxKeywords?: number | null;
  };
  costTracking?: {
    /**
     * Track estimated costs of AI API calls
     */
    enabled?: boolean | null;
    /**
     * Send an alert when monthly AI costs exceed this amount
     */
    monthlyBudget?: number | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        hasDropdown?: T;
        dropdownItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              description?: T;
              icon?: T;
              id?: T;
            };
        id?: T;
      };
  ctaButton?:
    | T
    | {
        enabled?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
      };
  mobileCtaButton?:
    | T
    | {
        enabled?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              uuiColor?: T;
              uuiSize?: T;
              buttonIconConfig?:
                | T
                | {
                    icon?: T;
                    position?: T;
                  };
              buttonIcon?: T;
              iconPos?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  companyInfo?:
    | T
    | {
        description?: T;
      };
  navColumns?:
    | T
    | {
        label?: T;
        items?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    uuiColor?: T;
                    uuiSize?: T;
                    buttonIconConfig?:
                      | T
                      | {
                          icon?: T;
                          position?: T;
                        };
                    buttonIcon?: T;
                    iconPos?: T;
                  };
              badge?:
                | T
                | {
                    text?: T;
                    color?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  copyrightText?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notFound_select".
 */
export interface NotFoundSelect<T extends boolean = true> {
  heading?: T;
  subheading?: T;
  link?:
    | T
    | {
        type?: T;
        newTab?: T;
        reference?: T;
        url?: T;
        label?: T;
        uuiColor?: T;
        uuiSize?: T;
        buttonIconConfig?:
          | T
          | {
              icon?: T;
              position?: T;
            };
        buttonIcon?: T;
        iconPos?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "postsSettings_select".
 */
export interface PostsSettingsSelect<T extends boolean = true> {
  beforeBlocks?:
    | T
    | {
        heroHeading?: T | HeroHeadingBlockSelect<T>;
        breadcrumb?: T | BreadcrumbBlockSelect<T>;
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  afterBlocks?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  gridColumns?:
    | T
    | {
        desktop?: T;
        tablet?: T;
        mobile?: T;
      };
  displayMode?: T;
  carouselSettings?:
    | T
    | {
        enableDrag?: T;
        showArrows?: T;
        showProgress?: T;
        peekAmount?: T;
        autoPlay?: T;
        autoPlayInterval?: T;
      };
  cardDisplay?:
    | T
    | {
        showCategories?: T;
        showAuthor?: T;
        showDate?: T;
        showReadingTime?: T;
        showExcerpt?: T;
        excerptLength?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "aiSettings_select".
 */
export interface AiSettingsSelect<T extends boolean = true> {
  provider?: T;
  apiKey?: T;
  model?: T;
  customEndpoint?: T;
  temperature?: T;
  maxTokens?: T;
  timeout?: T;
  altTag?:
    | T
    | {
        enabled?: T;
        model?: T;
        systemPrimer?: T;
        maxLength?: T;
        includeContext?: T;
        requireReview?: T;
        fallbackToFilename?: T;
        logGenerations?: T;
      };
  seoMeta?:
    | T
    | {
        enabled?: T;
        titleModel?: T;
        titleSystemPrimer?: T;
        titleMaxLength?: T;
        includeBrandInTitle?: T;
        descriptionModel?: T;
        descriptionSystemPrimer?: T;
        descriptionMinLength?: T;
        descriptionMaxLength?: T;
        analyzeFullContent?: T;
        contentWeight?: T;
        extractKeyThemes?: T;
        maxContentTokens?: T;
      };
  blogPostGeneration?:
    | T
    | {
        enabled?: T;
      };
  iconEnhancement?:
    | T
    | {
        enabled?: T;
        model?: T;
        autoKeywords?: T;
        autoCategory?: T;
        semanticSearch?: T;
        systemPrimer?: T;
        maxKeywords?: T;
      };
  costTracking?:
    | T
    | {
        enabled?: T;
        monthlyBudget?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'posts';
          value: number | Post;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ButtonBlock".
 */
export interface ButtonBlock {
  /**
   * Add one or more buttons with different styles and links
   */
  buttons?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'posts';
                value: number | Post;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Button color variant from UntitledUI design system
           */
          uuiColor?: ('primary' | 'primary-reversed' | 'accent' | 'secondary' | 'tertiary' | 'link') | null;
          /**
           * Button size variant
           */
          uuiSize?: ('sm' | 'md' | 'lg' | 'xl') | null;
          /**
           * Select an icon from the Icons collection and configure its position relative to button text
           */
          buttonIconConfig?: {
            /**
             * Select an icon to display in the button
             */
            icon?: (number | null) | Icon;
            /**
             * Position of the icon relative to button text
             */
            position?: ('leading' | 'trailing') | null;
          };
          /**
           * Legacy field - use buttonIconConfig instead
           */
          buttonIcon?: string | null;
          /**
           * Legacy field - use buttonIconConfig instead
           */
          iconPos?: ('leading' | 'trailing') | null;
        };
        id?: string | null;
      }[]
    | null;
  layout?: ('horizontal' | 'vertical') | null;
  alignment?: ('left' | 'center' | 'right') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'buttonBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock".
 */
export interface QuoteBlock {
  /**
   * The quote text
   */
  quote: string;
  author: {
    name: string;
    /**
     * Author title or role
     */
    role?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'quote';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ConclusionBlock".
 */
export interface ConclusionBlock {
  /**
   * Heading for the conclusion section
   */
  title: string;
  /**
   * Conclusion content (supports multiple paragraphs)
   */
  content: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'conclusion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}